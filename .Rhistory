ft_dplyr_transformer(sc, wines) |>
ml_param(sql)
ft_dplyr_transformer(sc, wines) |>
ml_param(sql)
ft_dplyr_transformer(sc, wines) |>
ml_param(statement = sql)
df <- wines |>
select(quality, alcohol, volatile_acidity, sulphates)
ft_dplyr_transformer(sc, df) |>
ml_param("statement")
wines |>
ft_dplyr_transformer(df)
my_pipeline <- ml_pipeline(sc) |>
ft_sql_transformer(
statement = sql
) |>
ft_r_formula(
quality ~ alcohol + volatile_acidity + sulphates
) |>
ml_linear_regression()
my_pipeline
my_pipeline_model <- ml_fit(my_pipeline, wines)
my_pipeline_model
ml_save(my_pipeline_model, "my_spark_model", overwrite = TRUE)
my_pipeline_model <- ml_load("my_spark_model")
setwd("~/Desktop/Y4S1/DSA306/Assignment 3")
my_pipeline_model <- ml_load("my_spark_model")
my_pipeline_model <- ml_load(sc, path = "my_spark_model")
my_pipeline_model$stages[[2]]
my_pipeline_model_loaded <- ml_load(sc, path = "my_spark_model")
ml_stage(loaded_model, stage = 2)
my_pipeline_model_loaded <- ml_load(sc, path = "my_spark_model")
ml_stage(my_pipeline_model_loaded, stage = 2)
# Create training and testing sets
wines_split <- wines |>
sdf_random_split(training = 0.7, testing = 0.3, seed = 1337)
wines_train <- wines_split$training
wines_test <- wines_split$testing
# Specify a hyperparameter grid
grid <- list(
linear_regression = list(
elastic_net_param = seq(from = 0, to = 1, length = 11),
reg_param = c(0, 10^seq(from = -2, to = 10, length = 100))
) )
# Create a cross-validator object
cv <- ml_cross_validator(
sc,
estimator = my_pipeline,
estimator_param_maps = grid,
evaluator = ml_regression_evaluator(
sc,
label_col = "quality",
metric_name = "mse"
),
num_folds = 10,
parallelism = -1,
seed = 8472
)
# Create training and testing sets
wines_split <- wines |>
sdf_random_split(training = 0.7, testing = 0.3, seed = 1337)
wines_train <- wines_split$training
wines_test <- wines_split$testing
# Specify a hyperparameter grid
grid <- list(
linear_regression = list(
elastic_net_param = seq(from = 0, to = 1, length = 11),
reg_param = c(0, 10^seq(from = -2, to = 10, length = 100))
) )
# Create a cross-validator object
cv <- ml_cross_validator(
sc,
estimator = my_pipeline,
estimator_param_maps = grid,
evaluator = ml_regression_evaluator(
sc,
label_col = "quality",
metric_name = "mse"
),
num_folds = 10,
parallelism = 1,
seed = 8472
)
# Train the model
my_cv_model <- ml_fit(cv, wines_train)
# Inspect the cross-validation results
ml_validation_metrics(my_cv_model) |>
arrange(desc(mse)) |>
head(10)
library(dplyr)
# Create training and testing sets
wines_split <- wines |>
sdf_random_split(training = 0.7, testing = 0.3, seed = 1337)
wines_train <- wines_split$training
wines_test <- wines_split$testing
# Specify a hyperparameter grid
grid <- list(
linear_regression = list(
elastic_net_param = seq(from = 0, to = 1, length = 11),
reg_param = c(0, 10^seq(from = -2, to = 10, length = 100))
) )
# Create a cross-validator object
cv <- ml_cross_validator(
sc,
estimator = my_pipeline,
estimator_param_maps = grid,
evaluator = ml_regression_evaluator(
sc,
label_col = "quality",
metric_name = "mse"
),
num_folds = 10,
parallelism = 1,
seed = 8472
)
# Train the model
my_cv_model <- ml_fit(cv, wines_train)
# Inspect the cross-validation results
ml_validation_metrics(my_cv_model) |>
arrange(desc(mse)) |>
head(10)
ml_validation_metrics(my_cv_model) |>
arrange(desc("mse")) |>
head(10)
ml_validation_metrics(my_cv_model) |>
arrange(desc("mse"))
ml_validation_metrics(my_cv_model) |>
arrange(desc(mse)) |>
head(10)
ml_validation_metrics(my_cv_model) |>
arrange(desc(mse))
spark_disconnect(sc)
sc <- spark_connect(master = "local", version = "3.4.0")
# Define your schema
schema <- list("index" = "integer", "header" = "character", "price" = "double", "type" = "character", "features" = "character", "accessories" = "character", "description" = "character", "categories" = "character", "mileage" = "double", "road_tax" = "double", "dereg_val" = "double", "coe" = "double", "engine_cap" = "double", "curb_weight" = "double", "manufactured_yr" = "double", "transmission" = "character", "omv" = "double", "arf" = "double", "power" = "double", "num_past_owners" = "character", "depreciation_val" = "double", "reg_date" = "character", "coe_left" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", schema = schema)
# Define your schema
schema <- list("index" = "integer", "header" = "character", "price" = "double", "type" = "character", "features" = "character", "accessories" = "character", "description" = "character", "categories" = "character", "mileage" = "double", "road_tax" = "double", "dereg_val" = "double", "coe" = "double", "engine_cap" = "double", "curb_weight" = "double", "manufactured_yr" = "double", "transmission" = "character", "omv" = "double", "arf" = "double", "power" = "double", "num_past_owners" = "character", "depreciation_val" = "double", "reg_date" = "character", "coe_left" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", schema = schema)
setwd("~/Desktop/Y4S1/DSA306/Project")
# Define your schema
schema <- list("index" = "integer", "header" = "character", "price" = "double", "type" = "character", "features" = "character", "accessories" = "character", "description" = "character", "categories" = "character", "mileage" = "double", "road_tax" = "double", "dereg_val" = "double", "coe" = "double", "engine_cap" = "double", "curb_weight" = "double", "manufactured_yr" = "double", "transmission" = "character", "omv" = "double", "arf" = "double", "power" = "double", "num_past_owners" = "character", "depreciation_val" = "double", "reg_date" = "character", "coe_left" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", schema = schema)
scraped_df
# Define your schema
schema <- list("index" = "integer", "header" = "character", "price" = "double", "type" = "character", "features" = "character", "accessories" = "character", "description" = "character", "categories" = "character", "mileage" = "double", "road_tax" = "double", "dereg_val" = "double", "coe" = "double", "engine_cap" = "double", "curb_weight" = "double", "manufactured_yr" = "double", "transmission" = "character", "omv" = "double", "arf" = "double", "power" = "double", "num_past_owners" = "character", "depreciation_val" = "double", "reg_date" = "character", "coe_left" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", columns = schema)
scraped_df
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", columns = schema)
scraped_df
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", columns = schema, na.strings = c("NA","N.A.","", " ")
scraped_df
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
scraped_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", columns = schema, na.strings = c("NA","N.A.","", " "))
scraped_df
sc <- spark_connect(master = "local", version = "3.4.0")
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
resale_cars_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", columns = schema, na.strings = c("NA","N.A.","", " "))
resale_cars_df
# removing the first column as it is the index and categories column
resale_cars_df <- resale_cars_df |> select(-1,-CATEGORIES)
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
resale_cars_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", name = resale_cars, columns = schema, na.strings = c("NA","N.A.","", " "))
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
resale_cars_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", name = "resale_cars", columns = schema, na.strings = c("NA","N.A.","", " "))
resale_cars_df
sc <- spark_connect(master = "local", version = "3.4.0", method = "databricks")
sc <- spark_connect(master = "local", method = "databricks")
sc <- spark_connect(method = "databricks", version = "3.4.0")
sc <- spark_connect(method = "databricks")
sc <- spark_connect(method = "databricks")
sc <- spark_connect(master = "databricks", method = "databricks")
pip install -U databricks-connect==6.3.*
databricks-connect configure
sc <- spark_connect(master = "databricks", method = "databricks")
spark_home <- system("databricks-connect get-spark-home")
sc <- spark_connect(method = "databricks",
spark_home = spark_home)
spark_home <- system("databricks-connect get-spark-home")
sc <- spark_connect(method = "databricks",
spark_home = spark_home)
spark_home <- system("databricks-connect get-spark-home")
sc <- spark_connect(method = "databricks",
spark_home = spark_home)
spark_home <- system("databricks-connect get-spark-home")
sc <- spark_connect(method = "databricks",
spark_home = spark_home)
library(ggplot2)
library(dplyr)
library(dbplot)
library(corrplot)
library(corrr)
df <- spark_read_parquet(sc, "cleaned_resalecars.parquet")
library(sparklyr)
sc <- spark_connect(master = "local", version = "3.4.0")
df <- spark_read_parquet(sc, "cleaned_resalecars.parquet")
# Correlation matrix w/ all numerical vars:
df_numeric <- df |>
select(PRICE, MILEAGE_KM, DEPRE_VAL, DEREG_VAL, ROAD_TAX, COE_LISTED, ENGINE_CAPACITY_CC, CURB_WEIGHT_KG, OMV, ARF, POWER, NUM_PAST_OWNERS, DAYS_OF_COE_LEFT, FEATURE_COUNT, ACCESSORIES_COUNT, AGE_SINCE_MANUFACTURED, DAYS_SINCE_REGISTERED) |>
collect()
glimpse(df_numeric)
corrplot(cor(df_numeric), method = "color", type = "lower", tl.cex = 0.5, tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.4)
# Correlation matrix w/ the final numerical variables + check for more correlation (< 0.9) between variables (none)
df_second <- df_first |>
select(PRICE, MILEAGE_KM, CURB_WEIGHT_KG, OMV, NUM_PAST_OWNERS, COE_LISTED, ENGINE_CAPACITY_CC, DAYS_OF_COE_LEFT, FEATURE_COUNT, ACCESSORIES_COUNT, AGE_SINCE_MANUFACTURED, DAYS_SINCE_REGISTERED)
# Correlation matrix w/ the final numerical variables + check for more correlation (< 0.9) between variables (none)
df_second <- df_numeric |>
select(PRICE, MILEAGE_KM, CURB_WEIGHT_KG, OMV, NUM_PAST_OWNERS, COE_LISTED, ENGINE_CAPACITY_CC, DAYS_OF_COE_LEFT, FEATURE_COUNT, ACCESSORIES_COUNT, AGE_SINCE_MANUFACTURED, DAYS_SINCE_REGISTERED)
glimpse(df_second)
corrplot(cor(df_second), method = "color", type = "lower", tl.cex = 0.5, tl.col = "black", tl.srt = 45, addCoef.col = "black", number.cex = 0.6)
df_chr <- df |>
select(PRICE, TYPE, TRANSMISSION, BRAND_CATEGORY) |>
collect()
glimpse(df_chr)
# BAR PLOTS
# PRICE against BRAND CATEGORY
ggplot(df_chr, aes(x = BRAND_CATEGORY, y = PRICE)) +
geom_bar(fill = "orange", stat = "summary", fun = "mean") +
labs(x = "Category of Car Brands", y = "Average Price in Thousands") +
scale_y_continuous(breaks = seq(0, 2000000, by = 100000),
labels = scales::comma_format(scale = 1e-3))
# PRICE against TYPE
ggplot(df_chr, aes(x = TYPE, y = PRICE)) +
geom_bar(fill = "orange", stat = "summary", fun = "mean") +
labs(x = "Car Types", y = "Average Price in Thousands") +
scale_y_continuous(breaks = seq(0, 2000000, by = 100000),
labels = scales::comma_format(scale = 1e-3))
# PRICE against TRANSMISSION
ggplot(df_chr, aes(x = TRANSMISSION, y = PRICE)) +
geom_bar(fill = "orange", stat = "summary", fun = "mean") +
labs(x = "Car Transmission", y = "Average Price in Thousands")
library(plumber)
# Run plumber
plumb(file = "spark-plumber-cars.R") |>
pr_run(port = 8000)
setwd("~/Documents/GitHub/bigdata-resalecaresinSG")
# Run plumber
plumb(file = "spark-plumber-cars.R") |>
pr_run(port = 8000)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local", version = "3.4.0")
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
resale_cars_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", name = "resale_cars", columns = schema, na.strings = c("NA","N.A.","", " "))
resale_cars_df
# removing the first column as it is the index and categories column
resale_cars_df <- resale_cars_df |> select(-1,-CATEGORIES)
resale_cars_df <- resale_cars_df |>
mutate(
BRAND = substring_index(HEADER, ' ', 1),
MODEL_SUBMODEL = substring_index(HEADER, '(', 1),
MODEL_SUBMODEL = split(MODEL_SUBMODEL, " "),
MODEL_SUBMODEL = concat_ws(" ", slice(MODEL_SUBMODEL,2, size(MODEL_SUBMODEL)))) |>
select(BRAND, MODEL_SUBMODEL, everything(), -HEADER)
resale_cars_df
resale_cars_df|>
distinct(BRAND)
#Alfa -> Alfa Romeo, Mercedes -> Mercedes-Benz, Mini -> MINI, Land -> Land Rover, Aston -> Aston Martin, Rolls -> Rolls-Royce
resale_cars_df <- resale_cars_df |>
mutate(BRAND = ifelse(BRAND %in% "Mini", "MINI", BRAND)) |>
mutate(MODEL_SUBMODEL = ifelse(BRAND %in% c("Mercedes", "Alfa", "Land", "Rolls", "Aston"),
concat_ws(" ", slice(split(MODEL_SUBMODEL, " "), 2, size(split(MODEL_SUBMODEL, " ")))), MODEL_SUBMODEL)) |>
mutate(BRAND = ifelse(BRAND %in% "Mercedes", "Mercedes-Benz", BRAND),
BRAND = ifelse(BRAND %in% "Alfa", "Alfa Romeo", BRAND),
BRAND = ifelse(BRAND %in% "Land", "Land Rover", BRAND),
BRAND = ifelse(BRAND %in% "Aston", "Aston Martin", BRAND),
BRAND = ifelse(BRAND %in% "Rolls", "Rolls-Royce", BRAND)
)
#checking if the brand names have been changed
resale_cars_df |>
filter(BRAND %in% c("Mercedes", "Alfa", "Land", "Rolls", "Aston", "Mini"))
resale_cars_df |>
filter(BRAND %in% c("Mercedes-Benz", "Alfa Romeo", "Land Rover", "Rolls-Royce", "Aston Martin", "MINI"))
### GROUPING THE BRANDS INTO BROADER CATEGORIES: EXOTIC, ULTA LUX, LUX, MID-LEVEL, ECONOMY, BUDGET, OTHERS
## OBTAINING A LIST OF RARE BRANDS -- 'OTHERS'
# Calculate the count for each brand
brand_counts <- resale_cars_df |>
group_by(BRAND) |>
summarise(count = n())
# Identify brands with count <= 5 and saving it as a vector
rare_brands <- brand_counts |>
filter(count <= 5) |>
select(BRAND) |>
collect() |>
pull(BRAND)
## new column called new_brand to identify the groupings. so far only others.
resale_cars_df <- resale_cars_df |>
mutate(BRAND_CATEGORY = ifelse(BRAND %in% rare_brands, 'Others', BRAND))
# Define vectors for each category
exotic_brands <- c("Aston Martin", "Ferrari", "Lamborghini", "McLaren")
ultra_luxury_brands <- c("Bentley", "Land Rover", "Maserati", "Porsche", "Rolls-Royce", "Alpine")
luxury_brands <- c("Audi", "BMW", "Jaguar", "Jeep", "Lexus", "Lotus", "Mercedes-Benz", "Volvo", "Polestar", "Tesla")
mid_level_brands <- c("Alfa Romeo", "Infiniti", "MINI", "Opel", "Volkswagen", "BYD", "MG")
economy_brands <- c("Chevrolet", "Citroen", "Fiat", "Ford", "Honda", "Hyundai", "Kia", "Mazda", "Mitsubishi", "Nissan", "Peugeot", "Renault", "Skoda", "Ssangyong", "Subaru", "Suzuki", "Toyota", "Smart", "SEAT", "Austin", "Morris")
budget_brands <- c("Proton", "Perodua")
# Create a new column "new_brand" based on the category
resale_cars_df <- resale_cars_df |>
mutate(BRAND_CATEGORY = case_when(
BRAND_CATEGORY != 'Others' ~
case_when(
BRAND %in% exotic_brands ~ 'Exotic',
BRAND %in% ultra_luxury_brands ~ 'Ultra Luxury',
BRAND %in% luxury_brands ~ 'Luxury',
BRAND %in% mid_level_brands ~ 'Mid Level',
BRAND %in% economy_brands ~ 'Economy',
BRAND %in% budget_brands ~ 'Budget',
TRUE ~ 'Others'
),
TRUE ~ 'Others'
))
resale_cars_df <- resale_cars_df |>
mutate(
DAYS = as.integer(regexp_extract(COE_TIME_LEFT, "(\\\\d+)day", 1)),
MONTHS = as.integer(regexp_extract(COE_TIME_LEFT, "(\\\\d+)mth", 1)),
YEARS = as.integer(regexp_extract(COE_TIME_LEFT, "(\\\\d+)yr", 1)),
DAYS_OF_COE_LEFT = ifelse(isnull(DAYS),0,DAYS) + ifelse(isnull(MONTHS),0,MONTHS)*30 + ifelse(isnull(YEARS),0,YEARS)*365) |>
select(-DAYS,-MONTHS,-YEARS,-COE_TIME_LEFT)
resale_cars_df <- resale_cars_df |>
mutate(
MANUFACTURED_YEAR = ifelse(MANUFACTURED_YEAR >= 2023, NA, MANUFACTURED_YEAR),
CURB_WEIGHT_KG = ifelse(CURB_WEIGHT_KG < 100, NA, CURB_WEIGHT_KG),
DAYS_OF_COE_LEFT = ifelse(DAYS_OF_COE_LEFT > 3650 | DAYS_OF_COE_LEFT <= 0, NA, DAYS_OF_COE_LEFT))
##imputing CURB_WEIGHT, ENGINE CAPACITY and POWER according to model_submodel + manufactured year
# Step 1: Group by MODEL_SUBMODEL and MANUFACTURED_YEAR and calculate the average values
average_values <- resale_cars_df |>
group_by(MODEL_SUBMODEL, MANUFACTURED_YEAR) |>
summarize(
AVG_CURB_WEIGHT_KG = mean(CURB_WEIGHT_KG, na.rm = TRUE),
AVG_ENGINE_CAPACITY_CC = mean(ENGINE_CAPACITY_CC, na.rm = TRUE),
AVG_POWER = mean(POWER, na.rm = TRUE),
MOST_COMMON_TYPE = mode(TYPE)
)
# Step 2: Join the original DataFrame with the average values based on MODEL_SUBMODEL and MANUFACTURED_YEAR
resale_cars_df <- resale_cars_df |>
left_join(average_values, by = c("MODEL_SUBMODEL", "MANUFACTURED_YEAR"))
# Step 3: Replace missing values with the corresponding average values
resale_cars_df <- resale_cars_df |>
mutate(
CURB_WEIGHT_KG = ifelse(is.na(CURB_WEIGHT_KG), AVG_CURB_WEIGHT_KG, CURB_WEIGHT_KG),
ENGINE_CAPACITY_CC = ifelse(is.na(ENGINE_CAPACITY_CC), AVG_ENGINE_CAPACITY_CC, ENGINE_CAPACITY_CC),
POWER = ifelse(is.na(POWER), AVG_POWER, POWER),
TYPE = ifelse(is.na(TYPE), MOST_COMMON_TYPE, TYPE)
) |>
select(-AVG_CURB_WEIGHT_KG, -AVG_ENGINE_CAPACITY_CC, -AVG_POWER, -MOST_COMMON_TYPE)  # Remove the temporary columns
#minus 1 because all of them end with "see specifications" as the last substring, which is not a feature.
resale_cars_df <- resale_cars_df |> mutate(FEATURE_COUNT = size(split(FEATURES, '[.,]'))-1,
ACCESSORIES_COUNT = size(split(ACCESSORIES, '[.,]'))
) |>
select(-FEATURES,-ACCESSORIES)
resale_cars_df <- resale_cars_df |> mutate(AGE_SINCE_MANUFACTURED = as.numeric(2023 - MANUFACTURED_YEAR),
DAYS_SINCE_REGISTERED = as.numeric(datediff(to_date("14-Nov-2023", "dd-MMM-yyyy"), to_date(REG_DATE, "dd-MMM-yyyy")))) |>
select(-MANUFACTURED_YEAR, -REG_DATE)
#change the character string "More than 6" in num_past_owners to 7 and make the column into integer type
resale_cars_df <- resale_cars_df |> mutate(NUM_PAST_OWNERS = ifelse(NUM_PAST_OWNERS == "More than 6", 7, NUM_PAST_OWNERS)) |>
mutate(NUM_PAST_OWNERS = as.integer(NUM_PAST_OWNERS))
## next we remove all rows with any missing values
resale_cars_df <- na.omit(resale_cars_df)
resale_cars_df
# Define your schema
schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
resale_cars_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", name = "resale_cars", columns = schema, na.strings = c("NA","N.A.","", " "))
na_strings <- c("NA","N.A.","", " ")
resale_cars_df <- resale_cars_df |>
mutate_all(~replace(., . %in% na_strings, NA))
resale_cars_df
# Define your schema
# schema <- list("INDEX" = "integer", "HEADER" = "character", "PRICE" = "double", "TYPE" = "character", "FEATURES" = "character", "ACCESSORIES" = "character", "DESCRIPTION" = "character", "CATEGORIES" = "character", "MILEAGE_KM" = "double", "ROAD_TAX" = "double", "DEREG_VAL" = "double", "COE_LISTED" = "double", "ENGINE_CAPACITY_CC" = "double", "CURB_WEIGHT_KG" = "double", "MANUFACTURED_YEAR" = "double", "TRANSMISSION" = "character", "OMV" = "double", "ARF" = "double", "POWER" = "double", "NUM_PAST_OWNERS" = "character", "DEPRE_VAL" = "double", "REG_DATE" = "character", "COE_TIME_LEFT" = "character")
# resale_cars_df <- spark_read_csv(sc, "sgCarMart_scraped.csv", escape = "\"", name = "resale_cars", columns = schema, na.strings = c("NA","N.A.","", " "))
# na_strings <- c("NA","N.A.","", " ")
scraped_df <- read.csv("sgCarMart_scraped.csv", na.strings = c("NA","N.A.","", " "), col.names = c("INDEX", "HEADER", "PRICE", "TYPE", "FEATURES", "ACCESSORIES", "DESCRIPTION", "CATEGORIES", "MILEAGE_KM", "ROAD_TAX", "DEREG_VAL", "COE_LISTED", "ENGINE_CAPACITY_CC", "CURB_WEIGHT_KG", "MANUFACTURED_YEAR", "TRANSMISSION", "OMV", "ARF", "POWER", "NUM_PAST_OWNERS", "DEPRE_VAL", "REG_DATE", "COE_TIME_LEFT"))
resale_cars_df <- copy_to(sc, scraped_df, overwrite=TRUE)
resale_cars_df
# removing the first column as it is the index and categories column
resale_cars_df <- resale_cars_df |> select(-1,-CATEGORIES)
resale_cars_df <- resale_cars_df |>
mutate(
BRAND = substring_index(HEADER, ' ', 1),
MODEL_SUBMODEL = substring_index(HEADER, '(', 1),
MODEL_SUBMODEL = split(MODEL_SUBMODEL, " "),
MODEL_SUBMODEL = concat_ws(" ", slice(MODEL_SUBMODEL,2, size(MODEL_SUBMODEL)))) |>
select(BRAND, MODEL_SUBMODEL, everything(), -HEADER)
resale_cars_df
resale_cars_df|>
distinct(BRAND)
#Alfa -> Alfa Romeo, Mercedes -> Mercedes-Benz, Mini -> MINI, Land -> Land Rover, Aston -> Aston Martin, Rolls -> Rolls-Royce
resale_cars_df <- resale_cars_df |>
mutate(BRAND = ifelse(BRAND %in% "Mini", "MINI", BRAND)) |>
mutate(MODEL_SUBMODEL = ifelse(BRAND %in% c("Mercedes", "Alfa", "Land", "Rolls", "Aston"),
concat_ws(" ", slice(split(MODEL_SUBMODEL, " "), 2, size(split(MODEL_SUBMODEL, " ")))), MODEL_SUBMODEL)) |>
mutate(BRAND = ifelse(BRAND %in% "Mercedes", "Mercedes-Benz", BRAND),
BRAND = ifelse(BRAND %in% "Alfa", "Alfa Romeo", BRAND),
BRAND = ifelse(BRAND %in% "Land", "Land Rover", BRAND),
BRAND = ifelse(BRAND %in% "Aston", "Aston Martin", BRAND),
BRAND = ifelse(BRAND %in% "Rolls", "Rolls-Royce", BRAND)
)
#checking if the brand names have been changed
resale_cars_df |>
filter(BRAND %in% c("Mercedes", "Alfa", "Land", "Rolls", "Aston", "Mini"))
resale_cars_df |>
filter(BRAND %in% c("Mercedes-Benz", "Alfa Romeo", "Land Rover", "Rolls-Royce", "Aston Martin", "MINI"))
### GROUPING THE BRANDS INTO BROADER CATEGORIES: EXOTIC, ULTA LUX, LUX, MID-LEVEL, ECONOMY, BUDGET, OTHERS
## OBTAINING A LIST OF RARE BRANDS -- 'OTHERS'
# Calculate the count for each brand
brand_counts <- resale_cars_df |>
group_by(BRAND) |>
summarise(count = n())
# Identify brands with count <= 5 and saving it as a vector
rare_brands <- brand_counts |>
filter(count <= 5) |>
select(BRAND) |>
collect() |>
pull(BRAND)
## new column called new_brand to identify the groupings. so far only others.
resale_cars_df <- resale_cars_df |>
mutate(BRAND_CATEGORY = ifelse(BRAND %in% rare_brands, 'Others', BRAND))
# Define vectors for each category
exotic_brands <- c("Aston Martin", "Ferrari", "Lamborghini", "McLaren")
ultra_luxury_brands <- c("Bentley", "Land Rover", "Maserati", "Porsche", "Rolls-Royce", "Alpine")
luxury_brands <- c("Audi", "BMW", "Jaguar", "Jeep", "Lexus", "Lotus", "Mercedes-Benz", "Volvo", "Polestar", "Tesla")
mid_level_brands <- c("Alfa Romeo", "Infiniti", "MINI", "Opel", "Volkswagen", "BYD", "MG")
economy_brands <- c("Chevrolet", "Citroen", "Fiat", "Ford", "Honda", "Hyundai", "Kia", "Mazda", "Mitsubishi", "Nissan", "Peugeot", "Renault", "Skoda", "Ssangyong", "Subaru", "Suzuki", "Toyota", "Smart", "SEAT", "Austin", "Morris")
budget_brands <- c("Proton", "Perodua")
# Create a new column "new_brand" based on the category
resale_cars_df <- resale_cars_df |>
mutate(BRAND_CATEGORY = case_when(
BRAND_CATEGORY != 'Others' ~
case_when(
BRAND %in% exotic_brands ~ 'Exotic',
BRAND %in% ultra_luxury_brands ~ 'Ultra Luxury',
BRAND %in% luxury_brands ~ 'Luxury',
BRAND %in% mid_level_brands ~ 'Mid Level',
BRAND %in% economy_brands ~ 'Economy',
BRAND %in% budget_brands ~ 'Budget',
TRUE ~ 'Others'
),
TRUE ~ 'Others'
))
resale_cars_df <- resale_cars_df |>
mutate(
DAYS = as.integer(regexp_extract(COE_TIME_LEFT, "(\\\\d+)day", 1)),
MONTHS = as.integer(regexp_extract(COE_TIME_LEFT, "(\\\\d+)mth", 1)),
YEARS = as.integer(regexp_extract(COE_TIME_LEFT, "(\\\\d+)yr", 1)),
DAYS_OF_COE_LEFT = ifelse(isnull(DAYS),0,DAYS) + ifelse(isnull(MONTHS),0,MONTHS)*30 + ifelse(isnull(YEARS),0,YEARS)*365) |>
select(-DAYS,-MONTHS,-YEARS,-COE_TIME_LEFT)
resale_cars_df <- resale_cars_df |>
mutate(
MANUFACTURED_YEAR = ifelse(MANUFACTURED_YEAR >= 2023, NA, MANUFACTURED_YEAR),
CURB_WEIGHT_KG = ifelse(CURB_WEIGHT_KG < 100, NA, CURB_WEIGHT_KG),
DAYS_OF_COE_LEFT = ifelse(DAYS_OF_COE_LEFT > 3650 | DAYS_OF_COE_LEFT <= 0, NA, DAYS_OF_COE_LEFT))
##imputing CURB_WEIGHT, ENGINE CAPACITY and POWER according to model_submodel + manufactured year
# Step 1: Group by MODEL_SUBMODEL and MANUFACTURED_YEAR and calculate the average values
average_values <- resale_cars_df |>
group_by(MODEL_SUBMODEL, MANUFACTURED_YEAR) |>
summarize(
AVG_CURB_WEIGHT_KG = mean(CURB_WEIGHT_KG, na.rm = TRUE),
AVG_ENGINE_CAPACITY_CC = mean(ENGINE_CAPACITY_CC, na.rm = TRUE),
AVG_POWER = mean(POWER, na.rm = TRUE),
MOST_COMMON_TYPE = mode(TYPE)
)
# Step 2: Join the original DataFrame with the average values based on MODEL_SUBMODEL and MANUFACTURED_YEAR
resale_cars_df <- resale_cars_df |>
left_join(average_values, by = c("MODEL_SUBMODEL", "MANUFACTURED_YEAR"))
# Step 3: Replace missing values with the corresponding average values
resale_cars_df <- resale_cars_df |>
mutate(
CURB_WEIGHT_KG = ifelse(is.na(CURB_WEIGHT_KG), AVG_CURB_WEIGHT_KG, CURB_WEIGHT_KG),
ENGINE_CAPACITY_CC = ifelse(is.na(ENGINE_CAPACITY_CC), AVG_ENGINE_CAPACITY_CC, ENGINE_CAPACITY_CC),
POWER = ifelse(is.na(POWER), AVG_POWER, POWER),
TYPE = ifelse(is.na(TYPE), MOST_COMMON_TYPE, TYPE)
) |>
select(-AVG_CURB_WEIGHT_KG, -AVG_ENGINE_CAPACITY_CC, -AVG_POWER, -MOST_COMMON_TYPE)  # Remove the temporary columns
#minus 1 because all of them end with "see specifications" as the last substring, which is not a feature.
resale_cars_df <- resale_cars_df |> mutate(FEATURE_COUNT = size(split(FEATURES, '[.,]'))-1,
ACCESSORIES_COUNT = size(split(ACCESSORIES, '[.,]'))
) |>
select(-FEATURES,-ACCESSORIES)
resale_cars_df <- resale_cars_df |> mutate(AGE_SINCE_MANUFACTURED = as.numeric(2023 - MANUFACTURED_YEAR),
DAYS_SINCE_REGISTERED = as.numeric(datediff(to_date("14-Nov-2023", "dd-MMM-yyyy"), to_date(REG_DATE, "dd-MMM-yyyy")))) |>
select(-MANUFACTURED_YEAR, -REG_DATE)
#change the character string "More than 6" in num_past_owners to 7 and make the column into integer type
resale_cars_df <- resale_cars_df |> mutate(NUM_PAST_OWNERS = ifelse(NUM_PAST_OWNERS == "More than 6", 7, NUM_PAST_OWNERS)) |>
mutate(NUM_PAST_OWNERS = as.integer(NUM_PAST_OWNERS))
## next we remove all rows with any missing values
resale_cars_df <- na.omit(resale_cars_df)
resale_cars_df
## save the final dataset as a csv
write.csv(resale_cars_df, "cleaned_resalecars.csv", row.names=FALSE)
## we also save a parquet file
spark_write_parquet(resale_cars_df, 'cleaned_resalecars.parquet')
setwd("~/Documents/GitHub/bigdata-resalecaresinSG")
## save the final dataset as a csv
write.csv(resale_cars_df, "cleaned_resalecars.csv", row.names=FALSE)
## we also save a parquet file
spark_write_parquet(resale_cars_df, 'cleaned_resalecars.parquet')
## save the final dataset as a csv
write.csv(resale_cars_df, "cleaned_resalecars.csv", row.names=FALSE)
## we also save a parquet file
spark_write_parquet(resale_cars_df, 'cleaned_resalecars.parquet')
setwd("/Users/kowsalya/Documents/GitHub/bigdata-resalecaresinSG")
## save the final dataset as a csv
write.csv(resale_cars_df, "cleaned_resalecars.csv", row.names=FALSE)
## we also save a parquet file
spark_write_parquet(resale_cars_df, 'cleaned_resalecars.parquet')
